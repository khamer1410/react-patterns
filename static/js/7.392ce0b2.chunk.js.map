{"version":3,"sources":["pages/container-presenter/Presentational.js","pages/container-presenter/Container.js"],"names":["Presentational","_ref","data","sortMovies","react_default","a","createElement","Wrapper","ButtonContainer","SortButton","onClick","map","film","key","episode_id","title","director","release_date","styled","div","_templateObject","_templateObject2","Button","_templateObject3","ContainerPage","state","movies","loading","error","sortKey","sortedMovies","_this","sort","b","nameA","nameB","setState","_this2","this","axios","get","concat","then","results","catch","finally","_this$state","moviesSortedById","prev","next","message","container_presenter_Presentational","Component"],"mappings":"ugBAIA,IAwBeA,EAxBQ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAMC,EAATF,EAASE,WAAT,OACrBC,EAAAC,EAAAC,cAACC,EAAD,KACEH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAACE,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAD,CAAYC,QAAS,kBAAMP,EAAW,gBAAtC,cACAC,EAAAC,EAAAC,cAACG,EAAD,CAAYC,QAAS,kBAAMP,EAAW,kBAAtC,gBACAC,EAAAC,EAAAC,cAACG,EAAD,CAAYC,QAAS,kBAAMP,EAAW,WAAtC,SACAC,EAAAC,EAAAC,cAACG,EAAD,CAAYC,QAAS,kBAAMP,EAAW,cAAtC,aAEFC,EAAAC,EAAAC,cAAA,WACGJ,EAAKS,IAAI,SAAAC,GACR,OACER,EAAAC,EAAAC,cAAA,WAASO,IAAKD,EAAKE,YACjBV,EAAAC,EAAAC,cAAA,oBAAYM,EAAKG,OACjBX,EAAAC,EAAAC,cAAA,uBAAeM,EAAKI,UACpBZ,EAAAC,EAAAC,cAAA,2BAAmBM,EAAKK,oBAU9BV,EAAUW,IAAOC,IAAVC,KAKPZ,EAAkBU,IAAOC,IAAVE,KAKfZ,EAAaS,YAAOI,IAAPJ,CAAHK,4DCpChB,IAEqBC,6MACnBC,MAAQ,CACNC,OAAQ,GACRC,SAAS,EACTC,MAAO,QAgBTzB,WAAa,SAAA0B,GAAW,IAGhBC,EAFaC,EAAKN,MAAhBC,OAEoBM,KAAK,SAAC3B,EAAG4B,GACnC,IAAMC,EAAQ7B,EAAEwB,GACVM,EAAQF,EAAEJ,GAChB,OAAIK,EAAQC,EAAc,EACtBD,EAAQC,GAAe,EACpB,IAGTJ,EAAKK,SAAS,CAAEV,OAAQI,wFAxBN,IAAAO,EAAAC,KAClBC,IAAMC,IAAN,GAAAC,OAVc,uBAUd,YACGC,KAAK,SAAAzC,GAAc,IAAXC,EAAWD,EAAXC,KACPmC,EAAKD,SAAS,CAAEV,OAAQxB,EAAKyC,YAE9BC,MAAM,SAAAhB,GACLS,EAAKD,SAAS,CAAER,MAAOA,MAExBiB,QAAQ,WACPR,EAAKD,SAAS,CAAET,SAAS,uCAkBtB,IAAAmB,EAC4BR,KAAKb,MAAhCC,EADDoB,EACCpB,OAAQC,EADTmB,EACSnB,QAASC,EADlBkB,EACkBlB,MACnBmB,EAAmBrB,GAAUA,EAChCM,KAAK,SAACgB,EAAMC,GAAP,OAAgBD,EAAKlC,WAAamC,EAAKnC,aAE/C,OAAIa,EACKvB,EAAAC,EAAAC,cAAA,iCAGLsB,EAEAxB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kCADF,IAC+BF,EAAAC,EAAAC,cAAA,WAC7BF,EAAAC,EAAAC,cAAA,YAAOsB,EAAMsB,SAFf,IAE+B9C,EAAAC,EAAAC,cAAA,WAC7BF,EAAAC,EAAAC,cAAA,6BAMJF,EAAAC,EAAAC,cAAC6C,EAAD,CAAgBjD,KAAM6C,EAAkB5C,WAAYmC,KAAKnC,oBAtDpBiD","file":"static/js/7.392ce0b2.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { Button } from 'components/Buttons';\n\nconst Presentational = ({ data, sortMovies }) => (\n  <Wrapper>\n    <h1>Star Wars movies</h1>\n    <h6>Sort by:</h6>\n    <ButtonContainer>\n      <SortButton onClick={() => sortMovies('episode_id')}>episode id</SortButton>\n      <SortButton onClick={() => sortMovies('release_date')}>release date</SortButton>\n      <SortButton onClick={() => sortMovies('title')}>title</SortButton>\n      <SortButton onClick={() => sortMovies('director')}>director</SortButton>\n    </ButtonContainer>\n    <div>\n      {data.map(film => {\n        return (\n          <section key={film.episode_id}>\n            <h3>Title: {film.title}</h3>\n            <h4>Director: {film.director}</h4>\n            <h5>Release date: {film.release_date}</h5>\n          </section>\n        )\n      })}\n    </div>\n  </Wrapper>\n)\n\nexport default Presentational\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`\nconst ButtonContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`\n\nconst SortButton = styled(Button)`\n  margin: 5px;\n`\n","import React, { Component } from 'react'\nimport Presentational from './Presentational'\nimport axios from 'axios'\n\nconst SWAPI_URL = 'https://swapi.co/api'\n\nexport default class ContainerPage extends Component {\n  state = {\n    movies: [],\n    loading: true,\n    error: null,\n  }\n\n  componentDidMount() {\n    axios.get(`${SWAPI_URL}/films/`)\n      .then(({ data }) => {\n        this.setState({ movies: data.results })\n      })\n      .catch(error => {\n        this.setState({ error: error })\n      })\n      .finally(() => {\n        this.setState({ loading: false })\n      })\n  }\n\n  sortMovies = sortKey => {\n    const { movies } = this.state\n\n    const sortedMovies = movies.sort((a, b) => {\n      const nameA = a[sortKey]\n      const nameB = b[sortKey]\n      if (nameA > nameB) return 1\n      if (nameA < nameB) return -1\n      return 0\n    })\n\n    this.setState({ movies: sortedMovies })\n  }\n\n  render() {\n    const { movies, loading, error } = this.state\n    const moviesSortedById = movies && movies\n      .sort((prev, next) => prev.episode_id > next.episode_id)\n\n    if (loading) {\n      return <div>Data is loading...</div>\n    }\n\n    if (error) {\n      return (\n        <div>\n          <p>Something went wrong!</p> <br />\n          <code>{error.message}</code> <br />\n          <p>Try again later</p>\n        </div>\n      )\n    }\n\n    return (\n      <Presentational data={moviesSortedById} sortMovies={this.sortMovies} />\n    )\n  }\n}\n"],"sourceRoot":""}